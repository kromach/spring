<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 
		bean?
		Spring에서 POJO(plain, old java object)를 Beans 라고 부른다.
		Beans는 어플리케이션의 핵심을 이루는 객체이며, Spring IoC (Inversion of Control) 컨테이너에 의해 인스턴스화, 관리, 생성된다.
		Beans는 xml(설정 메타 데이터) 파일에 의해 생성된다. 컨테이너는 이 데이터를 통해 Bean의 생성, 사이클, 종속성 등을 알 수 있다.
		어플리케이션의 객체가 지정되면 그 객체는 getBean() 메서드를 통해 가져올 수 있다.
	 -->
	<!-- 
		xml이 로드될 때 Bean 클래스의 객체를 생성해주는 역할 
		== HelloBean hello = new HelloBean(); 의 역할을 해줌
	-->
	<!-- 
	<bean id="hello" class="test.spring.bean.HelloBean" />
	<bean id="test" class="test.spring.bean.TestBean" />
 	-->
 	
 	<!-- base-package의 값으로 설정된 패키지 내의 클래스를 전체 스캔 -->
 	<!-- 
 		scan 하여 bean으로 등록 처리 해줄 수 있는 클래스는 클래스 선언부 상단에 
 		@Component 어노테이션이나 @Component를 상속받는 @Controller와 @Service, @Repository 가 있어야 한다. 
 		
 		@Component는 포괄적 선언
 		@Controller는 컨트롤러에
 		@Service는 서비스에
 		@Repository는 DAO에 
 	-->
 	<mvc:resources mapping="/resources/**" location="/resources/"/>

 	<context:component-scan base-package="test" />
 	 	
 	<!-- 리졸버 : 중간에 낙아채서 뭔가를 처리하는 아이들 -->
 	<!-- 뷰리졸버 id는 반드시 viewResolver 여야 함 -->
 	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
 		<property name="prefix" value="/WEB-INF/views/" />
 		<property name="suffix" value=".jsp" />
 		<property name="order" value="1" />
 	</bean> 
 
 	<!-- DB 세팅 -->
 	
 	<!-- 
 	dataSource
 	destroy-method : Bean 객체의 스코프가 끝났을 경우 (스프링에서 어플리케이션 컨텍스트가 종료된 경우) 
 					클래스 속성에 선언한 클래스의 close 메서드를 호출 // 사용이 끝나면 close를 해준다.
  	어플리케이션 컨텍스트 : 어플리케이션의 설정
 	 -->
 	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" 
 		destroy-method="close"
 		p:driverClassName="oracle.jdbc.driver.OracleDriver" 
 		p:url="jdbc:oracle:thin:@nullmaster.iptime.org:3000:ORCL"
 		p:username="java25"
 		p:password="java25"
 	/>
 	
 	<!-- dataSource property로 위에 설정한 bean의 id(dataSource)를 전달 -->
 	<!-- configLocation property로 mybatis-config.xml의 경로를 지정 -->
 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
 		<property name="dataSource" ref="dataSource" />
 		<property name="configLocation" value="/WEB-INF/mybatis/mybatis-config.xml" />
 	</bean>
 	
 	<!-- 
 		sqlSession 
 		커넥션과 dao를 섞어둔 것 같은 느낌 
 		스레드당 sqlSession이 하나씩 필요 
 	-->
 	<!-- destroy-method : clearCache 
 		최초의 커넥션 연결만 커넥션 풀을 사용하고, 이후에는 접속 정보를 템프에 저장해두었다가 
 		다음 연결시에는 템프를 이용하여 빠르게 처리함.
 		그래서 처리속도가 빠르다.
 		
 		clearCache를 적어주지 않으면 sql을 실행한 뒤 새로고침한 데이터를 받아오지 않고 캐싱된 
 		데이터를 계속 쓰기 때문에 최신 값을 받을 수 없다. 
 	 -->
 	<!-- sqlSessionFactory constructor-arg 로 위에 설정한 bean의 id(sqlSessionFactory)를 전달 -->
 	
 	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache" >
 		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
 	</bean>
 	
 	<!-- DB 세팅 종료 -->
 	
 	<!-- constructor-arg : 생성자 매개변수 -->
 	<!-- constructor-arg 를 통해 만드는 것을 생성자 주입방식이라 부른다. -->
 	
	<bean id="testDto" class="test.spring.model.TestDTO" > 
		<constructor-arg name="user_id" value="testId" /> 
		<constructor-arg name="user_pw" value="1212" /> 
 	</bean>

	<bean id="testOtherDto" class="test.spring.model.TestOtherDTO" > 
		<property name="id" value="otherTest" />
		<property name="pw" value="5555" />
		<property name="testDTO" ref="testDto" />
 	</bean>
 	
 	<!-- 멀티파트리졸버 -->
 	<!-- maxUploadSize default : -1 // 무제한 -->
 	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
 		<property name="maxUploadSize" value="-1" /> 
 		<property name="defaultEncoding" value="UTF-8" /> 
 	</bean>
</beans>